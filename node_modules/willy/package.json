{
  "name": "willy",
  "version": "0.2.4",
  "description": "An assertion library that reads very naturally.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/reergymerej/willy.git"
  },
  "keywords": [
    "assertion library",
    "assertion",
    "assert",
    "bdd",
    "tdd",
    "natural"
  ],
  "author": {
    "name": "Jeremy Greer",
    "email": "jeremy.greer.atl@gmail.com",
    "url": "http://jeremygreer.herokuapp.com/"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/reergymerej/willy/issues"
  },
  "homepage": "https://github.com/reergymerej/willy",
  "devDependencies": {
    "mocha": "~1.19.0",
    "q": "~1.0.1"
  },
  "dependencies": {
    "q": "~1.0.1"
  },
  "readme": "# Willy\n\nWilly is an assertion library designed to be simple and readable.  It doesn't follow the normal BDD/TDD assertion styles, but reads more like questions.\n\n```js\nvar will = require('willy').will;\n\ndescribe('some test suite', function () {\n    it('should do X, Y, and Z', function () {\n\n        // Will it?\n        will(true).be(true);\n\n    });\n});\n```\n\n## API\n\n### Index\n\n**Tests**\n* be\n* beA/beAn\n* beLike\n* eventually\n* exist\n* have\n* haveAny\n* haveOnly\n* haveOwn\n* not\n* throw\n\n**Utilities**\n* addTest\n\n#### Tests\n\n##### be \nchecks for identity (===)\n\n```js\n// pass\nwill(3).be(3);\n\n// fail\nwill('3').be(3);\n```\n\n##### beA/beAn\nchecks for inheritance (instanceof) *- These are synonyms.*\n\n```js\n// pass\nwill('').beA(String);\nwill([]).beAn(Array);\n\n// fail\nwill('').beA(Number);\n```\n\n##### beLike\nchecks for equality (==)\n\n```js\n// pass\nwill('').beLike(false);\n\n// fail\nwill('false').beLike(false);\n```\n\n##### eventually\nreturns a promise rather than raising an error\n\n```js\ndescribe('some test suite', function () {\n    it('should be less than 2', function () {\n        return will(2).eventually.beLessThan(2);\n    });\n});\n```\n\n##### exist\nchecks existence\n\n```js\n// pass\nvar foo = { bar: 1 };\n\nwill(foo.bar).exist();\n\n// fail\nwill(foo.baz).exist();\n```\n\n##### have\nchecks for items/properties in an Array/Object *- All must be present.*\n\n```js\n// pass\nwill([1, 2, 3]).have(1);\nwill([1, 2, 3]).have([1, 2]);\nwill({ foo: 1, bar: 1 }).have('foo');\nwill({ foo: 1, bar: 1 }).have(['foo', 'bar']);\n\n// fail\nwill([2, 3]).have(1);\nwill([1, 2]).have([1, 3]);\nwill({ foo: 1, bar: 1 }).have('baz');\nwill({ foo: 1, bar: 1 }).have(['foo', 'baz']);\n```\n\n##### haveAny\nchecks for the existence of one item/property in an Array/Object\n\n```js\n// pass\nwill([1, 2, 3]).haveAny(1);\nwill([1, 2, 3]).haveAny([3, 6]);\nwill({ foo: 1, bar: 1 }).haveAny('foo');\nwill({ foo: 1, bar: 1 }).haveAny(['foo', 'baz']);\n\n// fail\nwill([2, 3]).haveAny(1);\nwill([1, 2]).haveAny([3, 6]);\nwill({ foo: 1, bar: 1 }).haveAny('baz');\nwill({ foo: 1, bar: 1 }).haveAny(['baz', 'quux']);\n```\n\n##### haveOnly\nchecks Array/Object for unexpected items/properties\n\n```js\n// pass\nwill([1]).haveOnly(1);\nwill([1, 2, 3]).haveOnly([1, 2, 3]);\nwill({ foo: 1 }).haveOnly('foo');\nwill({ foo: 1, bar: 1 }).haveOnly(['foo', 'bar']);\n\n// fail\nwill([1, 2]).haveOnly(1);\nwill([1, 2, 3]).haveOnly([1, 2]);\nwill({ foo: 1, bar: 1 }).haveOnly('baz');\nwill({ foo: 1, bar: 1, baz: 1 }).haveOnly(['foo', 'bar']);\n```\n\n##### haveOwn\nchecks for own properties (hasOwnProperty)\n\n```js\nvar Foo = function () {};\nvar foo = new Foo();\n\nfoo.bar = true;\nFoo.prototype.baz = true;\n\n// pass\nwill(foo).haveOwn('bar');\n\n// fail\nwill(foo).haveOwn('baz');\n```\n\n##### not\nnegates the logic of any assertion\n\n```js\n// pass\nwill(true).not.be(false);\nwill([1, 2]).not.haveOnly(1);\n\n// fail\nwill('foo').not.be('foo');\nwill([1]).not.haveOnly(1);\n```\n\n##### throw\nchecks for errors being thrown\n\n```js\nvar bad = function () {\n    throw new Error('whoops');\n};\n\nvar good = function () {};\n\n// pass\nwill(bad).throw();\n\n// fail\nwill(good).throw();\n```\n\n#### Utilities\n\n##### addTest\nadd your own test to Willy\n\nAdd custom tests by passing a **named** function to `willy.addTest`.\n\n* Return the result of `this.if` so Willy can automatically handle `not` and `eventually` for you.  `if` takes 3 arguments:\n    * a function passed the value being tested\n    * a string explaining what you were testing\n    * the value tested (optional)\n\n```js\nvar willy = require('willy'),\n    will = willy.will;\n\nwilly.addTest(function beLessThan(expectedValue) {\n    return this.if(\n\n        // a function passed the value being tested\n        function (actualValue) {\n\n            // return the result of your test\n            return actualValue < expectedValue;\n        },\n\n        // a string explaining what you were testing\n        'be less than',\n\n        // the value tested (optional)\n        expectedValue\n    );\n});\n\n// passes\nwill(1).beLessThan(2);\n\n// fails\nwill(2).beLessThan(2); // 'expected <2> to be less than <2>'\nwill(1).not.beLessThan(2); // 'expected <1> not to be less than <2>'\n\n// fails as a promise\ndescribe('some test suite', function () {\n    it('should be less than 2', function () {\n        var promise = Q.fcall(function () { return 2; });\n        return will(promise).eventually.beLessThan(2);\n    });\n});\n```",
  "readmeFilename": "README.md",
  "_id": "willy@0.2.4",
  "_shasum": "5ffa5975e4fadf2484842eed27cd58f2f4aa6657",
  "_from": "willy@",
  "_resolved": "https://registry.npmjs.org/willy/-/willy-0.2.4.tgz"
}
